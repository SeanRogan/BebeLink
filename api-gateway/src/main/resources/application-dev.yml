eureka:
  instance:
    hostname: ${EUREKA_HOST_NAME:localhost}
    instanceId: ${eureka.instance.hostname}:${spring.application.name}:${random.value}
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVICE_URL_DEFAULT:http://localhost:8761/eureka/}
logging:
  level:
    root: ${LOGGING_LVL_ROOT:INFO}
server:
  port: 0
spring:
  application:
    name: ${SPRING_APPLICATION_NAME:sc-gateway}
  cloud:
    gateway:
      discovery:
        locator:
          lower-case-service-id: true
          enabled: true
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOriginPatterns: "http://localhost/*"
            allowedMethods: GET,POST,PUT,OPTIONS,DELETE
            allowCredentials: true
      redis:
        host: ${REDIS_HOSTNAME:localhost}
        port: ${REDIS_PORT:6379}
        password: ${REDIS_PASSWORD:redispass}
      routes:
        - id: router-service
          uri: http://router-service
          predicates:
            - Path=/router-service/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${ROUTER_SERVICE_RATE_LIMITER_REPLENISH_RATE:50}
                redis-rate-limiter.burstCapacity: ${ROUTER_SERVICE_RATE_LIMITER_REPLENISH_RATE:150}
        - id: generator-service
          uri: http://generator-service
          predicates:
            - Path=/generator-service/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: ${GENERATOR_SERVICE_RATE_LIMITER_REPLENISH_RATE:30}
                redis-rate-limiter.burstCapacity: ${GENERATOR_SERVICE_RATE_LIMITER_REPLENISH_RATE:50}
  kafka:
    producer:
      acks: all
      retries: 5
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
      key-serializer: org.apache.kafka-common.serialization.String-Serializer
      value-serializer: org.apache.kafka-common.serialization.String-Serializer
      properties:
        delivery:
          timeout:
            ms: ${KAFKA_PRODUCER_DELIVERY_TIMEOUT:10000}
        linger:
          ms: ${KAFKA_PRODUCER_LINGER:1000}
        request:
          timeout:
            ms: ${KAFKA_PRODUCER_REQUEST_TIMEOUT:5000}
  redis:
    host: ${REDIS_HOSTNAME:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:redispass}